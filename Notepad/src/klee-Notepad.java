
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JTextArea;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kmlee1127
 */
public class Notepad extends javax.swing.JFrame {

    /**
     * Creates new form Notepad
     */
    public Notepad() {
        initComponents();
        textArea.getCaret().addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e) {
                int x = 0, y = 0;
                
                try {
                    y = textArea.getLineOfOffset(textArea.getCaretPosition());
                    x = textArea.getCaretPosition() - textArea.getLineStartOffset(y);
                } catch (BadLocationException ex) {
                }
                
                x++;
                y++;
                String str = "Ln " + y + ", Col " + x;
                statusBarLabel.setText(String.format("%-25s", str));
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        popUpCut = new javax.swing.JMenuItem();
        popUpCopy = new javax.swing.JMenuItem();
        popUpPaste = new javax.swing.JMenuItem();
        openFileChooser = new javax.swing.JFileChooser();
        saveAsFileChooser = new javax.swing.JFileChooser();
        fontDialog = new javax.swing.JDialog();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        fontLabel = new javax.swing.JLabel();
        fontStyleLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        styleScrollPane = new javax.swing.JScrollPane();
        styleList = new javax.swing.JList();
        sizeScrollPane = new javax.swing.JScrollPane();
        sizeList = new javax.swing.JList();
        samplePanel = new javax.swing.JPanel();
        sampleFont = new javax.swing.JLabel();
        sampleLabel = new javax.swing.JLabel();
        fontScrollPane = new javax.swing.JScrollPane();
        fontList = new javax.swing.JList();
        findDialog = new javax.swing.JDialog();
        directionLabel = new javax.swing.JLabel();
        directionPanel = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        findLabel = new javax.swing.JLabel();
        findNextButton = new javax.swing.JButton();
        findCancelButton = new javax.swing.JButton();
        findTextField = new javax.swing.JTextField();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        saveDialog = new javax.swing.JDialog();
        saveLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        dontSaveButton = new javax.swing.JButton();
        saveCancelButton = new javax.swing.JButton();
        aboutDialog = new javax.swing.JDialog();
        aboutLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        copyrightLabel = new javax.swing.JLabel();
        aboutOkButton = new javax.swing.JButton();
        statusBarPanel = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        pageSetupMenuItem = new javax.swing.JMenuItem();
        printMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        delete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        find = new javax.swing.JMenuItem();
        findNext = new javax.swing.JMenuItem();
        replace = new javax.swing.JMenuItem();
        goTo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        selectAll = new javax.swing.JMenuItem();
        timeDate = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        wordWrapMenuItem = new javax.swing.JCheckBoxMenuItem();
        changeFont = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        statusBarMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        viewHelp = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        aboutNotepad = new javax.swing.JMenuItem();

        popUpCut.setText("Cut");
        popUpCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpCutActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popUpCut);

        popUpCopy.setText("Copy");
        popUpCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpCopyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popUpCopy);

        popUpPaste.setText("Paste");
        popUpPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpPasteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popUpPaste);

        openFileChooser.setApproveButtonText("Open");

        saveAsFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveAsFileChooser.setOpaque(true);

        fontDialog.setTitle("Font");
        fontDialog.setResizable(false);
        fontDialog.setLocationRelativeTo(this);
        fontDialog.setSize(new java.awt.Dimension(394, 420));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fontLabel.setText("Font:");

        fontStyleLabel.setText("Font style:");

        sizeLabel.setText("Size:");

        styleList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Plain", "Bold", "Italic", "Bold Italic" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        styleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        styleList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontStyleActionPerformed(evt);
            }
        });
        styleScrollPane.setViewportView(styleList);

        sizeList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        sizeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sizeList.setToolTipText("");
        sizeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontSizeActionPerformed(evt);
            }
        });
        sizeScrollPane.setViewportView(sizeList);

        samplePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        samplePanel.setMaximumSize(new java.awt.Dimension(151, 65));
        samplePanel.setMinimumSize(new java.awt.Dimension(151, 65));
        samplePanel.setName(""); // NOI18N

        sampleFont.setText("AaBbYyZz");

        javax.swing.GroupLayout samplePanelLayout = new javax.swing.GroupLayout(samplePanel);
        samplePanel.setLayout(samplePanelLayout);
        samplePanelLayout.setHorizontalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sampleFont, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );
        samplePanelLayout.setVerticalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sampleFont, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
        );

        sampleLabel.setText("Sample");

        fontList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListActionPerformed(evt);
            }
        });
        fontScrollPane.setViewportView(fontList);

        javax.swing.GroupLayout fontDialogLayout = new javax.swing.GroupLayout(fontDialog.getContentPane());
        fontDialog.getContentPane().setLayout(fontDialogLayout);
        fontDialogLayout.setHorizontalGroup(
            fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontDialogLayout.createSequentialGroup()
                .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fontDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontLabel)
                            .addGroup(fontDialogLayout.createSequentialGroup()
                                .addComponent(fontScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(styleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fontStyleLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sizeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sizeLabel)))))
                    .addGroup(fontDialogLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sampleLabel)
                            .addComponent(samplePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addGap(8, 8, 8))
        );
        fontDialogLayout.setVerticalGroup(
            fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontDialogLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(fontDialogLayout.createSequentialGroup()
                        .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fontLabel)
                            .addComponent(fontStyleLabel)
                            .addComponent(sizeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(styleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(fontScrollPane)))
                    .addComponent(sizeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sampleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(samplePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        findDialog.setTitle("Find");
        findDialog.setResizable(false);
        findDialog.setLocationRelativeTo(this);
        findDialog.setSize(new java.awt.Dimension(452, 153));

        directionLabel.setText("Direction");

        directionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jRadioButton2.setText("Up");

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Down");

        javax.swing.GroupLayout directionPanelLayout = new javax.swing.GroupLayout(directionPanel);
        directionPanel.setLayout(directionPanelLayout);
        directionPanelLayout.setHorizontalGroup(
            directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        directionPanelLayout.setVerticalGroup(
            directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap())
        );

        findLabel.setText("Find what:");

        findNextButton.setText("Find Next");
        findNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findNextButtonActionPerformed(evt);
            }
        });

        findCancelButton.setText("Cancel");
        findCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCancelButtonActionPerformed(evt);
            }
        });

        matchCaseCheckBox.setText("Match Case");

        javax.swing.GroupLayout findDialogLayout = new javax.swing.GroupLayout(findDialog.getContentPane());
        findDialog.getContentPane().setLayout(findDialogLayout);
        findDialogLayout.setHorizontalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findDialogLayout.createSequentialGroup()
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(findDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(findLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(findDialogLayout.createSequentialGroup()
                        .addComponent(matchCaseCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(directionLabel)
                            .addComponent(directionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findNextButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(findCancelButton, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        findDialogLayout.setVerticalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findDialogLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findNextButton)
                    .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(findLabel)
                        .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(matchCaseCheckBox))
                    .addGroup(findDialogLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(directionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );

        saveDialog.setTitle("Notepad");
        saveDialog.setResizable(false);
        saveDialog.setLocationRelativeTo(this);
        saveDialog.setSize(new java.awt.Dimension(400, 121));

        saveLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        saveLabel.setText("Do you want to save changes to this file?");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        dontSaveButton.setText("Don't Save");
        dontSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontSaveButtonActionPerformed(evt);
            }
        });

        saveCancelButton.setText("Cancel");
        saveCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout saveDialogLayout = new javax.swing.GroupLayout(saveDialog.getContentPane());
        saveDialog.getContentPane().setLayout(saveDialogLayout);
        saveDialogLayout.setHorizontalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dontSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveCancelButton)
                .addContainerGap())
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(saveLabel)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        saveDialogLayout.setVerticalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(dontSaveButton)
                    .addComponent(saveCancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aboutDialog.setModal(true);
        aboutDialog.setResizable(false);
        aboutDialog.setLocationRelativeTo(this);
        aboutDialog.setSize(new java.awt.Dimension(538, 198));

        aboutLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        aboutLabel.setText("Notepad");

        versionLabel.setText("Beta Version 1.0");

        copyrightLabel.setText("Copyright (c) 2014");

        aboutOkButton.setText("OK");
        aboutOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutOkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(aboutLabel)
                .addContainerGap(225, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutDialogLayout.createSequentialGroup()
                        .addGroup(aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(copyrightLabel)
                            .addComponent(versionLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                        .addGap(344, 344, 344)
                        .addComponent(aboutOkButton)))
                .addContainerGap())
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(aboutLabel)
                .addGap(39, 39, 39)
                .addComponent(versionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyrightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(aboutOkButton)
                .addGap(26, 26, 26))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notepad\n");
        setLocationByPlatform(true);

        statusBarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusBarPanel.setEnabled(false);

        statusBarLabel.setText(" ");
        statusBarLabel.setPreferredSize(new java.awt.Dimension(45, 16));

        javax.swing.GroupLayout statusBarPanelLayout = new javax.swing.GroupLayout(statusBarPanel);
        statusBarPanel.setLayout(statusBarPanelLayout);
        statusBarPanelLayout.setHorizontalGroup(
            statusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusBarPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusBarPanelLayout.setVerticalGroup(
            statusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPanelLayout.createSequentialGroup()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(textArea);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setMnemonic('n');
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator1);

        pageSetupMenuItem.setText("Page Setup...");
        pageSetupMenuItem.setEnabled(false);
        pageSetupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageSetupMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(pageSetupMenuItem);

        printMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMenuItem.setText("Print...");
        printMenuItem.setEnabled(false);
        fileMenu.add(printMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenu.add(fileMenu);

        editMenu.setText("Edit");

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo.setText("Undo");
        undo.setEnabled(false);
        editMenu.add(undo);
        editMenu.add(jSeparator3);

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        editMenu.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        editMenu.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        editMenu.add(paste);

        delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        delete.setText("Delete");
        editMenu.add(delete);
        editMenu.add(jSeparator4);

        find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        find.setText("Find...");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        editMenu.add(find);

        findNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        findNext.setText("Find Next");
        editMenu.add(findNext);

        replace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        replace.setText("Replace...");
        replace.setEnabled(false);
        editMenu.add(replace);

        goTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        goTo.setText("Go To...");
        goTo.setEnabled(false);
        editMenu.add(goTo);
        editMenu.add(jSeparator5);

        selectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        editMenu.add(selectAll);

        timeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        timeDate.setText("Time/Date");
        timeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeDateActionPerformed(evt);
            }
        });
        editMenu.add(timeDate);

        mainMenu.add(editMenu);

        formatMenu.setText("Format");

        wordWrapMenuItem.setText("Word Wrap");
        wordWrapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordWrapMenuItemActionPerformed(evt);
            }
        });
        formatMenu.add(wordWrapMenuItem);

        changeFont.setMnemonic('f');
        changeFont.setText("Font...");
        changeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFontActionPerformed(evt);
            }
        });
        formatMenu.add(changeFont);

        mainMenu.add(formatMenu);

        viewMenu.setText("View");

        statusBarMenuItem.setSelected(true);
        statusBarMenuItem.setText("Status Bar");
        statusBarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBarMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(statusBarMenuItem);

        mainMenu.add(viewMenu);

        helpMenu.setText("Help");

        viewHelp.setText("View Help");
        viewHelp.setEnabled(false);
        viewHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHelpActionPerformed(evt);
            }
        });
        helpMenu.add(viewHelp);
        helpMenu.add(jSeparator6);

        aboutNotepad.setText("About Notepad");
        aboutNotepad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutNotepadActionPerformed(evt);
            }
        });
        helpMenu.add(aboutNotepad);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
            .addComponent(statusBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int result = openFileChooser.showOpenDialog(this);
        if (result == openFileChooser.APPROVE_OPTION) 
        {
           this.setTitle(openFileChooser.getSelectedFile().getName() + " - Notepad" );
           try
           {
               String strLine;
               file = openFileChooser.getSelectedFile();
               BufferedReader br = new BufferedReader(new FileReader(file));
               
               while( (strLine = br.readLine()) != null) textArea.append(strLine + "\n");
           }
           catch (Exception e) {}
        } 
        //else if (result == openFileChooser.CANCEL_OPTION) { openFileChooser.setVisible(false); }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void pageSetupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageSetupMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pageSetupMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if( savedText.getText().equals(textArea.getText()) ) System.exit(0);
        else saveDialog.setVisible(true);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void viewHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewHelpActionPerformed

    private void aboutNotepadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutNotepadActionPerformed
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutNotepadActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        int result = saveAsFileChooser.showSaveDialog(this);
        if (result == saveAsFileChooser.APPROVE_OPTION) 
        {          
            try
            {
                file = new File(saveAsFileChooser.getSelectedFile() + ".txt");
                BufferedWriter outFile = new BufferedWriter(new FileWriter(file));
                textArea.write(outFile);
                saveAsUsed = true;
            }
            catch (IOException e1) {}
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void popUpCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpCutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_popUpCutActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_cutActionPerformed

    private void popUpCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpCopyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_popUpCopyActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_copyActionPerformed

    private void popUpPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpPasteActionPerformed
        textArea.paste();
    }//GEN-LAST:event_popUpPasteActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        textArea.paste();
    }//GEN-LAST:event_pasteActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_selectAllActionPerformed

    private void changeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFontActionPerformed
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = env.getAvailableFontFamilyNames();
        fontList.setListData(fontNames);  
        
        for(int i = 0; i < fontNames.length; i++)
            if(sampleFont.getFont().getFontName().equals(fontNames[i]))
                fontList.setSelectedIndex(i);
        
        styleList.setSelectedIndex(0);
        sizeList.setSelectedIndex(4);
        
        fontDialog.setVisible(true);
    }//GEN-LAST:event_changeFontActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        textArea.setFont(new Font( (String)fontList.getSelectedValue(), style, size));
        fontDialog.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void fontListActionPerformed(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontListActionPerformed
      sampleFont.setFont(new Font( (String)fontList.getSelectedValue(), style, size ));
    }//GEN-LAST:event_fontListActionPerformed

    private void fontStyleActionPerformed(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontStyleActionPerformed
        String selStyle = (String) styleList.getSelectedValue();
        if(selStyle.equals("Plain")) style = Font.PLAIN;
        if(selStyle.equals("Bold")) style = Font.BOLD;
        if(selStyle.equals("Italic")) style = Font.ITALIC;
        if(selStyle.equals("Bold Italic")) style = Font.BOLD + Font.ITALIC;
       sampleFont.setFont(new Font( (String)fontList.getSelectedValue(), style, size));
    }//GEN-LAST:event_fontStyleActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fontDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void fontSizeActionPerformed(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontSizeActionPerformed
        size = Integer.parseInt( (String) sizeList.getSelectedValue());
        sampleFont.setFont(new Font( (String)fontList.getSelectedValue(), style, size));
    }//GEN-LAST:event_fontSizeActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        findDialog.setVisible(true);
    }//GEN-LAST:event_findActionPerformed

    private void findNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findNextButtonActionPerformed
        int pos = 0;
        
        // Get the text to find...convert it to lower case for eaiser comparision
        String find = findTextField.getText();
        
        // Focus the text area, otherwise the highlighting won't show up
        textArea.requestFocusInWindow();
                    
        // Make sure we have a valid search term
        if (find != null && find.length() > 0) 
        {
            Document document = textArea.getDocument();
            int findLength = find.length();
            
            try 
            {
                boolean found = false;
                // Rest the search position if we're at the end of the document
                if (pos + findLength > document.getLength()) pos = 0;
   
                // While we haven't reached the end...
                // "<=" Correction
                while (pos + findLength <= document.getLength()) 
                {
                    // Extract the text from teh docuemnt
                    String match = document.getText(pos, findLength).toLowerCase();
                    // Check to see if it matches or request
                    if (match.equals(find)) 
                    {
                        found = true;
                        break;
                    }
                pos++;                           
                }

                // If we found something
                if (found) 
                {
                    // Get the rectangle of the where the text would be visible...
                    Rectangle viewRect = textArea.modelToView(pos);
                    
                    // Scroll to make the rectangle visible
                    textArea.scrollRectToVisible(viewRect);
                                
                    // Highlight the text
                    textArea.setCaretPosition(pos + findLength);
                    textArea.moveCaretPosition(pos);
                                
                    // Move the search position beyond the current match
                    pos += findLength;
                }

            }//end try 
            catch (Exception exp) {}
        }//end if
        
    }//GEN-LAST:event_findNextButtonActionPerformed

    private void wordWrapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordWrapMenuItemActionPerformed
        if(wordWrapMenuItem.isSelected()) textArea.setLineWrap(true);
        else textArea.setLineWrap(false);
    }//GEN-LAST:event_wordWrapMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        try
        {
            if(saveAsUsed == true)
            {
                file = new File(saveAsFileChooser.getSelectedFile() + ".txt");
                BufferedWriter outFile = new BufferedWriter(new FileWriter(file));
                textArea.write(outFile);
            }
            else
            {
                int result = saveAsFileChooser.showSaveDialog(this);
                if (result == saveAsFileChooser.APPROVE_OPTION) 
                {          
                    try
                    {
                        file = new File(saveAsFileChooser.getSelectedFile() + ".txt");
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(file));
                        textArea.write(outFile);
                        saveAsUsed = true;
                    }
                    catch (IOException e1) {}
                }
            }
        }
        catch (IOException e1) {}
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        if( savedText.getText().equals(textArea.getText()) ) textArea.setText("");
        else 
        {
            newFileBoolean = true;
            saveDialog.setVisible(true);
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveDialog.setVisible(false);
        int result = saveAsFileChooser.showSaveDialog(this);
        if (result == saveAsFileChooser.APPROVE_OPTION) 
        {          
            try
            {
                file = new File(saveAsFileChooser.getSelectedFile() + ".txt");
                BufferedWriter outFile = new BufferedWriter(new FileWriter(file));
                textArea.write(outFile);
                saveAsUsed = true;
            }
            catch (IOException e1) {}
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void dontSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontSaveButtonActionPerformed
        if(newFileBoolean == true) 
        {
            textArea.setText("");
            file = null;
            newFileBoolean = false;
            saveAsUsed = false;
            saveDialog.setVisible(false);
        }
        else System.exit(0);
    }//GEN-LAST:event_dontSaveButtonActionPerformed

    private void saveCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCancelButtonActionPerformed
        saveDialog.setVisible(false);
    }//GEN-LAST:event_saveCancelButtonActionPerformed

    private void aboutOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutOkButtonActionPerformed
        aboutDialog.setVisible(false);
    }//GEN-LAST:event_aboutOkButtonActionPerformed

    private void timeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeDateActionPerformed
        //get current date time with Calendar()
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        textArea.append(dateFormat.format(cal.getTime()));
    }//GEN-LAST:event_timeDateActionPerformed

    private void statusBarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBarMenuItemActionPerformed
        if(statusBarMenuItem.isSelected()) statusBarPanel.setVisible(true);
        else statusBarPanel.setVisible(false);
    }//GEN-LAST:event_statusBarMenuItemActionPerformed

    private void findCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCancelButtonActionPerformed
        findDialog.setVisible(false);
    }//GEN-LAST:event_findCancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notepad().setVisible(true);
            }
        });
    }

    private int size;
    private int style;
    private JTextArea savedText = new JTextArea();
    private boolean newFileBoolean, saveAsUsed = false;
    private File file;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JMenuItem aboutNotepad;
    private javax.swing.JButton aboutOkButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem changeFont;
    private javax.swing.JMenuItem copy;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuItem delete;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JPanel directionPanel;
    private javax.swing.JButton dontSaveButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem find;
    private javax.swing.JButton findCancelButton;
    private javax.swing.JDialog findDialog;
    private javax.swing.JLabel findLabel;
    private javax.swing.JMenuItem findNext;
    private javax.swing.JButton findNextButton;
    private javax.swing.JTextField findTextField;
    private javax.swing.JDialog fontDialog;
    private javax.swing.JLabel fontLabel;
    private javax.swing.JList fontList;
    private javax.swing.JScrollPane fontScrollPane;
    private javax.swing.JLabel fontStyleLabel;
    private javax.swing.JMenu formatMenu;
    private javax.swing.JMenuItem goTo;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton okButton;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pageSetupMenuItem;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem popUpCopy;
    private javax.swing.JMenuItem popUpCut;
    private javax.swing.JMenuItem popUpPaste;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JMenuItem replace;
    private javax.swing.JLabel sampleFont;
    private javax.swing.JLabel sampleLabel;
    private javax.swing.JPanel samplePanel;
    private javax.swing.JFileChooser saveAsFileChooser;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveCancelButton;
    private javax.swing.JDialog saveDialog;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JList sizeList;
    private javax.swing.JScrollPane sizeScrollPane;
    private javax.swing.JLabel statusBarLabel;
    private javax.swing.JCheckBoxMenuItem statusBarMenuItem;
    private javax.swing.JPanel statusBarPanel;
    private javax.swing.JList styleList;
    private javax.swing.JScrollPane styleScrollPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem timeDate;
    private javax.swing.JMenuItem undo;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JMenuItem viewHelp;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JCheckBoxMenuItem wordWrapMenuItem;
    // End of variables declaration//GEN-END:variables
}
